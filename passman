#!/bin/bash

set -e

realbin=$(readlink -f $0)
[ ! "$(id -un)" = "passman" ] && {
    exec sudo -u passman $realbin
}

cd $(dirname $realbin)

API="cryptapi.sh"
LEGAL_CHARS="[[:alnum:]_-]"
UNAME=""
UTOKEN=""

ATOKEN=""

SCRIPT=$0

. $API

function assist {
    cat <<EOF

 $SCRIPT [-u <uname>] <command>

 <comamnd> := ""
           := get <pname>
           := passwd
           := list [user|group|pass] <regexfilter>?
           := info [user <uname>|group <gname>|pass <pname>]
           := manage [user <uname> [+|-]<gname>|group <gname> [+|-]<pname>]
           := [add] [user <uname>|group <gname>|pass <pname>]
           := [del] [user <uname>|group <gname>|pass <pname>]
           := [promote|demote] <uname>

 In interactive mode, any valid <command> string is allowed.

EOF
}

function validate {
    if [ -z "$UNAME" ]
    then
	read -p "Authenticate as user: " UNAME
    fi
    if [ -z "$UTOKEN" ]
    then
	read -sp "Password: " pw
	echo
	UTOKEN=$(decrypt user/$UNAME $pw)
	result=$?
	unset pw
	return $result
    fi
}

function validate-admin {
    validate
    if [ -z $ATOKEN ]
    then
	ATOKEN=$(decrypt group/admin.$UNAME $UTOKEN)
    fi
    return $?

}

function menu {
    while true
    do
	echo -n "passman> "
	read action

	case "$action" in
	    quit|q )
		exit 0
		;;
	    "help" )
		assist
		;;
	    * )
		execute $action || true
		;;
	esac
    done
}

function execute {
    if ! echo "$*" | grep -E \
	-e "^$" \
	-e "^get $LEGAL_CHARS+$" \
	-e "^passwd$" \
        -e "^list (user|group|pass).*$" \
	-e "^info (user|group|pass) $LEGAL_CHARS+$" \
        -e "^manage (user|group) $LEGAL_CHARS+ [+-]$LEGAL_CHARS+$" \
        -e "^add (user|group|pass) $LEGAL_CHARS+$" \
        -e "^del (user|group|pass) $LEGAL_CHARS+$" \
        -e "^(promote|demote) $LEGAL_CHARS+$" 2>&1 >/dev/null
    then
	assist
	return 1
    fi
    
    action=$1
    shift

    case "$action" in
	get )
	    validate
	    show-pass $UNAME $UTOKEN "$1" || echo "$UNAME cannot access $1."
	    return 0
	    ;;
	list )
	    type=""
	    case "$1" in
		user )
		    type="users"
		    ;;
		group )
		    type="groups"
		    ;;
		pass )
		    type="passwords"
		    ;;
		* )
		    assist
		    return $?
		    ;;
	    esac
	    regex=$2
	    
	    echo $(list-$type | tr ' ' '\n' | grep -E "$regex")
	    return 0
	    ;;
	
	info )
	    case "$1" in
		user )
		    name=$2
		    
		    echo
		    echo "$name is in the following groups:"
		    list-user-groups $name
		    echo
		    echo "$name can access the following passwords:"
		    list-available $name
		    echo
		    return 0
		    ;;
		group )
		    name=$2
		    
		    echo
		    echo "$name has the following members:"
		    list-group-users $name
		    echo
		    echo "$name contains the following passwords:"
		    list-group-passes $name
		    echo
		    return 0
		    ;;
		pass )
		    name=$2
		    
		    echo "$name belongs to the following groups:"
		    list-password-groups $name
		    return 0
		    ;;
		* )
		    assist
		    return $?
		    ;;
	    esac
	    ;;
	manage )
	    type=$1
	    name=$2
	    action=${3:0:1}
	    member=${3:1}
	    
	    case "$type" in
		user )
		    type="-user-group"
		    ;;
		group )
		    type="-group-pass"
		    ;;
		* )
		    assist
		    return $?
		    ;;
	    esac
	    case "$action" in
		"+" )
		    action="map"
		    ;;
		"-" )
		    action="unmap"
		    ;;
		* )
		    assist
		    return $?
	    esac
	    
	    validate-admin || return $?
	    ${action}$type $ATOKEN $name $member
	    return $?
	    ;;
	add|del )
	    type=$1
	    name=$2
	    case "$action" in
		"add" )
		    case "$type" in
			user )
			    read -sp "Choose a password: " pass1
			    echo
			    read -sp "Retype password: " pass2
			    echo
			    if [ "$pass1" = "$pass2" ]
			    then
				pass=$pass1
			    else
				echo "Passwords do not match. User not added."
				return 1
			    fi
			    ;;
			pass )
			    read -d $(echo -e '\e') \
				 -p "$(echo -e "Enter the password data you want to save.\nEnd input by pressing ESC.\n")" pass
			    ;;
			group )
			    pass=""
			    ;;
		    esac
		    ;;
		"del" )
		    action="remove"
		    ;;
	    esac

	    validate-admin || return $?
	    ${action}"-"$type $ATOKEN $name $pass
	    return $?
	    ;;
	passwd )
	    validate
	    read -sp "New password: " pw1
	    read -sp "Retype password: " pw2
	    [ "$pw1" = "$pw2" ] && change-user-pass $UTOKEN $UNAME $pw1
	    result=$?
	    unset pw1
	    unset pw2
	    return $result
	    ;;
	promote )
	    name=$1
	    validate-admin || return $?
	    make-user-admin $ATOKEN $name
	    return $?
	    ;;
	demote )
	    name=$1
	    validate-admin || return $?
	    unmake-user-admin $ATOKEN $name
	    return $?
	    ;;
	"" )
	    return 0
	    ;;
	* )
	    assist
	    return $?
    esac
}

# check for switches, act on them and discard them
while var=$(echo "$1" | grep -E "^-")
do
    shift
    case "$var" in
	-u )
	    UNAME=$1 && shift
	    ;;
	-* )
	    assist
	    exit $?
	    ;;
    esac
done

# choose interactive mode if no further arguments
case "$1" in
    "" )
	menu
	;;
    * )
	execute $@
	;;
esac
