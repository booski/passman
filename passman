#!/bin/bash

set -e

realbin=$(readlink -f "$0")

cd $(dirname "$realbin")

API="cryptapi.sh"
CONFIG="config"
LEGAL_CHARS="[[:alnum:]_-]"
UNAME=$SUDO_USER
UTOKEN=""

ATOKEN=""

SCRIPT="$0"

. "$API"
. "$CONFIG"

# Enable command line editing, history and completion
if [ -z "$RLWRAP_RUNNING" ] \
    && which rlwrap >/dev/null \
    && [ "$(id -un)" != "$APPUSER" ]
then
    EXTRA_COMP="$HOME"/.passman_completions
    list-passwords > "$EXTRA_COMP"
    touch "$HOME"/.passman_history
    export RLWRAP_RUNNING=1
    exec rlwrap -C passman -b '' -f completions -f "$EXTRA_COMP" "$realbin" "$@"
fi

if [ ! "$(id -un)" = "$APPUSER" ] \
    && [ -z "$PASSMAN_TEST" ]
then
    exec sudo -u "$APPUSER" "$realbin" "$@"
fi

function assist {
    if [ -z "$1" ]
    then
	cat help/passman
    else
	if ! cat help/"$1" 2>/dev/null
	then
	    echo "That is not a command."
	    return 1
	fi
    fi
    echo
    return 0
}

function validate {
    if [ -z "$UTOKEN" ]
    then
	read -sp "${UNAME}'s Password: " pw
	echo
	UTOKEN=$(decrypt user/"$UNAME" "$pw")
	local result=$?
	unset pw
	if [ "$result" != "0" ]
	then
	    echo "Password incorrect."
	fi
	return "$result"
    fi
}

function validate-admin {
    validate
    if [ -z "$ATOKEN" ]
    then
	ATOKEN=$(decrypt group/admin."$UNAME" "$UTOKEN")
    fi
    return $?
}

function menu {
    local action=""

    trap 'echo' exit
    while true
    do
	echo -n "passman> "
	read action

	case "$action" in
	    quit|q )
		exit 0
		;;
	    "help" )
		assist
		;;
	    * )
		execute $action || true
		;;
	esac
    done
}

function execute {
    if ! echo "$*" | grep -E \
	-e "^$" \
	-e "^get $LEGAL_CHARS+$" \
	-e "^passwd$" \
        -e "^list (user|group|pass).*$" \
	-e "^info (user|group|pass) $LEGAL_CHARS+$" \
        -e "^manage (user|pass) $LEGAL_CHARS+ [+-]$LEGAL_CHARS+$" \
	-e "^modify $LEGAL_CHARS" \
        -e "^add (user|group|pass) $LEGAL_CHARS+$" \
        -e "^del (user|group|pass) $LEGAL_CHARS+$" \
        -e "^(promote|demote) $LEGAL_CHARS+$" \
	-e "^help $LEGAL_CHARS+$" \
	2>&1 >/dev/null
    then
	assist
	return 1
    fi
    
    local action="$1"
    shift

    local type=""
    local name=""
    local member=""
    local pass=""
    local result=""

    case "$action" in
	get )
	    if ! list-passwords | grep -q "^$1$"
	    then
		echo "Password '$1' doesn't exist."
		return 1
	    fi
	    validate || return $?
	    if ! show-pass "$UNAME" "$UTOKEN" "$1"
	    then 
		echo "$UNAME cannot access $1."
		return 1
	    fi
	    return 0
	    ;;
	list )
	    type=""
	    case "$1" in
		user )
		    type="users"
		    ;;
		group )
		    type="groups"
		    ;;
		pass )
		    type="passwords"
		    ;;
		* )
		    assist
		    return $?
		    ;;
	    esac
	    local regex="$2"
	    
	    printf "%s\n" "$(list-"$type" | tr ' ' '\n' | grep -E "$regex")"
	    return 0
	    ;;
	
	info )
	    case "$1" in
		user )
		    name="$2"
		    
		    echo
		    echo "$name is in the following groups:"
		    list-user-groups "$name"
		    echo
		    echo "$name can access the following passwords:"
		    list-available "$name"
		    echo
		    return 0
		    ;;
		group )
		    name="$2"
		    
		    echo
		    echo "$name has the following members:"
		    list-group-users "$name"
		    echo
		    echo "$name contains the following passwords:"
		    list-group-passes "$name"
		    echo
		    return 0
		    ;;
		pass )
		    name="$2"
		    
		    echo "$name belongs to the following groups:"
		    list-password-groups "$name"
		    return 0
		    ;;
		* )
		    assist
		    return $?
		    ;;
	    esac
	    ;;
	manage )
	    type="$1"
	    name="$2"
	    action="${3:0:1}"
	    group="${3:1}"
	    local message=""
	    
	    case "$action" in
		"+" )
		    action="map"
		    message="added to"
		    ;;
		"-" )
		    action="unmap"
		    message="removed from"
		    ;;
		* )
		    assist
		    return $?
	    esac
	    
	    validate-admin || return $?
	    ${action}-${type}-group "$ATOKEN" "$name" "$group"
	    local result=$?
	    case "$result" in
		"0" )
		    echo "'$name' successfully $message '$group'."
		    ;;
		"$E_PRIVILEGE" )
		    echo "You cannot add/remove people from the admin group with this command."
		    ;;
		"$E_CONFLICT" )
		    echo "'$name' is already in '$group'."
		    ;;
		* )
		    echo "An error occurred."
		    ;;
	    esac
	    return "$result"
	    ;;
	add|del )
	    type="$1"
	    name="$2"
	    local message=""
	    case "$action" in
		"add" )
		    case "$type" in
			user )
			    local pass1=""
			    local pass2=""

			    read -sp "Choose a password: " pass1
			    echo
			    read -sp "Retype password: " pass2
			    echo

			    if [ "$pass1" = "$pass2" ]
			    then
				pass="$pass1"
			    else
				echo "Passwords do not match. User not added."
				return 1
			    fi
			    ;;
			pass )
			    tmpfile="tmp-$(date +%y%m%d%H%M%S)"
			    trap "rm -f $tmpfile" EXIT
			    touch "$tmpfile"
			    chmod 600 "$tmpfile"
			    
			    if [ -z "$EDITOR" ]
			    then 
				editor "$tmpfile"
			    else
			        "$EDITOR" "$tmpfile"
			    fi
			    
			    if [ -s "$tmpfile" ]
			    then
				echo -e '\n' >> "$tmpfile"
				pass=$(cat "$tmpfile")
				rm "$tmpfile"
			    else
				echo "No password data given, not doing anything."
				return 1
			    fi
 			    ;;
			group )
			    pass=""
			    ;;
		    esac
		    ;;
		"del" )
		    action="remove"
		    ;;
	    esac
	    
	    validate-admin || return $?
	    ${action}"-"$type "$ATOKEN" "$name" "$pass"
	    echo -n "$type '$name' successfully "
	    if [ "$action" = "add" ]
	    then 
		echo "added." 
	    else
		echo "removed."
	    fi
	    return $?
	    ;;
	modify )
	    local pname="$1"
	    validate-admin || return $?

	    tmpfile="tmp-$(date +%y%m%d%H%M%S)"
	    trap "rm -f $tmpfile" EXIT
	    touch "$tmpfile"
	    chmod 600 "$tmpfile"
	    show-pass "$UNAME" "$UTOKEN" "$pname" > "$tmpfile"

	    if [ -z "$EDITOR" ]
	    then 
		editor "$tmpfile"
	    else
		"$EDITOR" "$tmpfile"
	    fi
	    
	    if [ -s "$tmpfile" ]
	    then
		echo -e '\n' >> "$tmpfile"
		pass=$(cat "$tmpfile")
		rm "$tmpfile"*
	    else
		echo "No password data given, not doing anything."
		rm "$tmpfile"*
		return 1
	    fi
	    
	    modify-pass "$ATOKEN" "$pname" "$pass"
	    echo "Pass '$pname' successfully updated."
	    return 0
	    ;;
	passwd )
	    local pass1=""
	    local pass2=""

	    validate || return $?
	    read -sp "New password: " pass1
	    echo
	    read -sp "Retype password: " pass2
	    echo

	    if [ "$pass1" = "$pass2" ]
	    then 
		change-user-pass "$UTOKEN" "$UNAME" "$pass1"
	    fi
	    result=$?

	    unset pass1
	    unset pass2
	    
	    if [ "$result" = "0" ] 
	    then
		echo "Your password has been changed."
	    fi
	    return "$result"
	    ;;
	promote )
	    name=$1
	    validate-admin || return $?
	    make-user-admin "$ATOKEN" "$name"
	    echo "'$name' is now an administrator."
	    return 0
	    ;;
	demote )
	    name="$1"
	    if [ "$name" == "$UNAME" ]
	    then
		echo "You cannot demote yourself, not doing anything."
		return 1
	    fi
	    validate-admin || return $?
	    unmake-user-admin "$ATOKEN" "$name"
	    echo "'$name' is no longer an administrator."
	    return $?
	    ;;
	'help' )
	    assist "$1"
	    ;;
	"" )
	    return 0
	    ;;
	* )
	    assist
	    return $?
    esac
}

# check for switches, act on them and discard them
while [ "${1:0:1}" == "-" ]
do
    var=${1:1}
    shift
    case "$var" in
	u )
	    UNAME="$1"
	    shift
	    ;;
	e )
	    EDITOR="$1"
	    shift
	    ;;
	* )
	    assist
	    exit $?
	    ;;
    esac
done

# choose interactive mode if no further arguments
case "$1" in
    "" )
	menu
	;;
    * )
	execute "$@"
	;;
esac
