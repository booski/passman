#!/bin/bash

set -e

API="cryptapi.sh"
LEGAL_CHARS="[[:alnum:]_-]"
UNAME=""
UTOKEN=""

ATOKEN=""

SCRIPT=$0

. $API

function assist {
    cat <<EOF

 $SCRIPT [-u <uname>] <command>

 <comamnd> := ""
           := get <pname>
           := list [user|group|pass] <regexfilter>?
           := info [user <uname>|group <gname>|pass <pname>]
           := manage [user <uname> [+|-]<gname>|group <gname> [+|-]<pname>]
           := [add] [user <uname> <upass>|group <gname>|pass <pname> <pvalue>]
           := [del] [user <uname>|group <gname>|pass <pname>]
           := [promote|demote] <uname>

 In interactive mode, any valid <command> string is allowed.

EOF
}

function validate {
    if [ -z "$UNAME" ]
    then
	read -p "Username: " UNAME
    fi
    if [ -z "$UTOKEN" ]
    then
	read -sp "Password: " pass
	echo
	UTOKEN=$(decrypt user/$UNAME $pass) || UTOKEN=""
	result=$?
	unset pass
	return $result
    fi
}

function validate-admin {
    if ls group/admin.$UNAME &>/dev/null
    then
	validate
	ATOKEN=$(decrypt group/admin.$UNAME $UTOKEN)
	return $?
    else
	read -sp "Administrator password: " pass
	echo
	ATOKEN=$(decrypt user/admin $pass)
	result=$?
	unset pass
	return $result
    fi
}

function menu {
    while true
    do
	echo -n "passman> "
	read action

	case "$action" in
	    quit|q )
		exit 0
		;;
	    "help" )
		assist
		;;
	    * )
		if echo $action | grep -E -e "^get $LEGAL_CHARS+$" \
                                          -e "^list (user|group|pass).*$" \
	                                  -e "^info (user|group|pass) $LEGAL_CHARS+$" \
                                          -e "^manage (user|group) $LEGAL_CHARS+ [+-]$LEGAL_CHARS+$" \
                                          -e "^add (user|pass) $LEGAL_CHARS+ $LEGAL_CHARS+$" \
                                          -e "^add group $LEGAL_CHARS+$" \
                                          -e "^del (user|group|pass) $LEGAL_CHARS+$" \
                                          -e "^(promote|demote) $LEGAL_CHARS+$" 2>&1 >/dev/null
		then
		    execute $action
		else
		    assist
		fi
		;;
	esac
    done
}

function execute {
    action=$1
    shift
    
    case "$action" in
	get )
	    validate
	    show-pass $UNAME $UTOKEN "$1" || echo "$UNAME cannot access $1."
	    return $?
	    ;;
	list )
	    type=""
	    case "$1" in
		user )
		    type="users"
		    ;;
		group )
		    type="groups"
		    ;;
		pass )
		    type="passwords"
		    ;;
		* )
		    assist
		    return $?
		    ;;
	    esac
	    regex=$2
	    
	    echo $(list-$type | tr ' ' '\n' | grep -E "$regex")
	    return 0
	    ;;
	
	info )
	    case "$1" in
		user )
		    name=$2
		    
		    echo
		    echo "$name is in the following groups:"
		    list-user-groups $name
		    echo
		    echo "$name can access the following passwords:"
		    list-available $name
		    echo
		    return 0
		    ;;
		group )
		    name=$2
		    
		    echo
		    echo "$name has the following members:"
		    list-group-users $name
		    echo
		    echo "$name contains the following passwords:"
		    list-group-passes $name
		    echo
		    return 0
		    ;;
		pass )
		    name=$2
		    
		    echo "$name belongs to the following groups:"
		    list-password-groups $name
		    return 0
		    ;;
		* )
		    assist
		    return $?
		    ;;
	    esac
	    ;;
	manage )
	    type=$1
	    name=$2
	    action=$(echo $3 | grep -o ^.)
	    member=$(echo $3 | sed -rn "s/.(.+)/\1/p")
	    
	    case "$type" in
		user )
		    type="-user-group"
		    ;;
		group )
		    type="-group-pass"
		    ;;
		* )
		    assist
		    return $?
		    ;;
	    esac
	    case "$action" in
		"+" )
		    action="map"
		    ;;
		"-" )
		    action="unmap"
		    ;;
		* )
		    assist
		    return $?
	    esac
	    
	    validate-admin || return $?
	    ${action}$type $ATOKEN $name $member
	    return $?
	    ;;
	add|del )
	    type=$1
	    name=$2
	    case "$action" in
		add )
		    [ ! "$type" = "group" ] && pass=$3
		    ;;
		del )
		    action="remove"
		    ;;
	    esac
	    
	    validate-admin || return $?
	    ${action}"-"$type $ATOKEN $name $pass
	    return $?
	    ;;
	promote )
	    name=$1
	    validate-admin || return $?
	    make-user-admin $ATOKEN $name
	    return $?
	    ;;
	demote )
	    name=$1
	    validate-admin || return $?
	    unmake-user-admin $ATOKEN $name
	    return $?
	    ;;
	"" )
	    return 0
	    ;;
	* )
	    assist
	    return $?
    esac
}

# check for switches, act on them and discard them
while var=$(echo "$1" | grep -E "^-")
do
    shift
    case "$var" in
	-u )
	    UNAME=$1 && shift
	    ;;
	-* )
	    assist
	    exit $?
	    ;;
    esac
done

# choose interactive mode if no further arguments
case "$1" in
    "" )
	menu
	;;
    * )
	execute $@
	;;
esac
